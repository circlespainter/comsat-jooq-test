org.springframework.aop.framework.JdkDynamicAopProxy.invoke
org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound
org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation
org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed
org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection
org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept
org.springframework.cglib.proxy.MethodProxy.invoke
org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor.invoke
org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed
org.springframework.transaction.interceptor.TransactionInterceptor.invoke
org.springframework.transaction.interceptor.TransactionInterceptor.commitTransactionAfterReturning
org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary
org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction
org.springframework.aop.framework.JdkDynamicAopProxy.invoke
org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection
org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint
org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation
org.springframework.jdbc.datasource.DataSourceTransactionManager.getTransaction
org.springframework.jdbc.datasource.DataSourceTransactionManager.doGetTransaction
org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit
org.springframework.jdbc.datasource.DataSourceTransactionManager.doRollback
org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection
org.springframework.jdbc.datasource.DataSourceUtils.doCloseConnection
org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection
org.springframework.jdbc.datasource.DataSourceUtils.releaseConnection
org.springframework.transaction.PlatformTransactionManager.getTransaction
org.springframework.transaction.support.AbstractPlatformTransactionManager.doBegin
org.springframework.transaction.support.AbstractPlatformTransactionManager.commit
org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit
org.springframework.jdbc.datasource.DataSourceTransactionManager.commitTransactionAfterReturning
org.springframework.jdbc.datasource.DataSourceTransactionManager.doCleanupAfterCompletion
org.springframework.jdbc.datasource.DataSourceTransactionManager.processCommit 
org.springframework.jdbc.datasource.DataSourceUtils.resetConnectionAfterTransaction
org.springframework.transaction.support.AbstractPlatformTransactionManager.cleanupAfterCompletion
org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning
org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction
org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy$TransactionAwareInvocationHandler.invoke
org.springframework.transaction.support.AbstractPlatformTransactionManager.processRollback
org.springframework.transaction.support.AbstractPlatformTransactionManager.rollback
org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing

# Missing jooq instrumentation?
org.jooq.impl.DefaultDSLContext.fetchOne
